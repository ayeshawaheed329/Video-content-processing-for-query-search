# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI-Playvid.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QRunnable, pyqtSlot, pyqtSignal, QObject, QThread, QThreadPool
from multiprocessing import Process
from Playvideobypyglet import playVideos
import re
import datetime
from mutagen.mp3 import MP3

class Worker(QRunnable):

    def __init__(self, fn, *args, **kwargs):
        super(Worker, self).__init__()
        self.args = args
        self.kwargs = kwargs
        self.fn = fn

    @pyqtSlot()
    def run(self):
        self.fn()


class Ui_MainWindow(object):

    def __init__(self, timeList, vidname):
        self.times = timeList
        self.doclist = []
        self.doclist.append(vidname)


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 700)
        MainWindow.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(96, 129, 240, 255), stop:0.55 rgba(61, 225, 235, 255), stop:0.98 rgba(0, 0, 0, 255), stop:1 rgba(0, 0, 0, 0));\n"
"color:white;\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.ResultLabel = QtWidgets.QLabel(self.centralwidget)
        self.ResultLabel.setGeometry(QtCore.QRect(240, 120, 421, 45))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.ResultLabel.setFont(font)
        self.ResultLabel.setStyleSheet("background:transparent;")
        self.ResultLabel.setObjectName("ResultLabel")
        self.Resultbox = QtWidgets.QTextBrowser(self.centralwidget)
        self.Resultbox.setGeometry(QtCore.QRect(240, 160, 540, 151))
        self.Resultbox.setStyleSheet("background:transparent;\n"
                                     "font-weight:bold;\n"
                                     "font-size:18px;\n"
                                     "border:1px solid white;")
        self.Resultbox.setObjectName("Resultbox")
        self.forwardBtn = QtWidgets.QPushButton(self.centralwidget)
        self.forwardBtn.setGeometry(QtCore.QRect(520, 400, 261, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.forwardBtn.setFont(font)
        self.forwardBtn.setObjectName("forwardBtn")
        self.forwardBtn.clicked.connect(lambda: self.forwardBtnFunction())
        self.timebox = QtWidgets.QLineEdit(self.centralwidget)
        self.timebox.setGeometry(QtCore.QRect(240, 400, 261, 41))
        self.timebox.setStyleSheet("background:transparent;\n"
 "font-size:18px;\n"
"border:1px solid white;")
        self.timebox.setObjectName("timebox")
        self.vidPlayLabel = QtWidgets.QLabel(self.centralwidget)
        self.vidPlayLabel.setGeometry(QtCore.QRect(240, 340, 380, 45))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.vidPlayLabel.setFont(font)
        self.vidPlayLabel.setStyleSheet("background:transparent;")
        self.vidPlayLabel.setObjectName("vidPlayLabel")
        self.backLink = QtWidgets.QPushButton(self.centralwidget)
        self.backLink.setGeometry(QtCore.QRect(480, 480, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.backLink.setFont(font)
        self.backLink.setStyleSheet("background:transparent;\n"
"border:none;")
        self.backLink.setObjectName("backLink")
        self.backLink.clicked.connect(
            lambda: self.backButtonFunction(MainWindow))
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Results"))
        self.ResultLabel.setText(_translate("MainWindow", "Result (Time )"))
        self.forwardBtn.setText(_translate("MainWindow", "Forward"))
        self.vidPlayLabel.setText(_translate("MainWindow", "Enter time to forward video"))
        self.backLink.setText(_translate("MainWindow", "Go Back"))
        self.displayResult()

    def displayResult(self):
        for x in self.times:
            n = int(x)
            y = str(datetime.timedelta(seconds=n))
            output = str(y)
            self.Resultbox.append(output)

    def forwardBtnFunction(self):
        time = self.timebox.text()
        special_characters = "!@  .';|}{-%# $%^&*()-+?_=,<>/"
        lettter = bool(re.search('[a-zA-Z]', time));
        char = False
        if any(c in special_characters for c in time):
            char = True
        if lettter == False and char== False and time!="":
            h, m, s = time.split(':')
            time = int(h) * 3600 + int(m) * 60 + int(s)

        for key in self.doclist:
            fn = key
        fn = fn.split(".")[0]
        path = "Mp3Files/" + fn + ".mp3"
        audio = MP3(path)
        duration = audio.info.length
        from dialogueBox import Ui_MainWindow
        global msgWindow
        msgWindow = QtWidgets.QMainWindow()
        if time == "":
            lui = Ui_MainWindow("Enter Time")
            lui.setupUi(msgWindow)
            msgWindow.show()
        elif lettter == True or char== True:
            lui = Ui_MainWindow("Enter Correct Time !")
            lui.setupUi(msgWindow)
            msgWindow.show()
        elif duration <= time:
            lui = Ui_MainWindow("Entered time is more than video duration")
            lui.setupUi(msgWindow)
            msgWindow.show()
        else:
            process = Process(target=playVideos,
                              args=(self.doclist, True, time, False, 0))

            process.start()

    def backButtonFunction(self, mainWindow):
        mainWindow.close()


# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())
