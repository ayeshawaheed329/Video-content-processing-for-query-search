# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'upload-file.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QApplication, QFileDialog
import os , os.path
from os import path
from shutil import copyfile,move
from DatasetTranslation import FindPointOfTime
from VectorSPaceModel import BooleanModel


class UploadUi_MainWindow(object):

    def __init__(self):
        self.fileName = ""
        self.filePath = ""
        DIR = 'F:/pycharmProjects/HCI-Project/Mp4Files/'
        self.NoFiles= len([name for name in os.listdir(DIR) if os.path.isfile(os.path.join(DIR, name))])
        self.NoFiles = self.NoFiles + 1
        self.arr = os.listdir("F:/pycharmProjects/HCI-Project/Mp4Files/")


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 700)
        MainWindow.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(96, 129, 240, 255), stop:0.55 rgba(61, 225, 235, 255), stop:0.98 rgba(0, 0, 0, 255), stop:1 rgba(0, 0, 0, 0));\n"
"color:white;\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mainLabel = QtWidgets.QLabel(self.centralwidget)
        self.mainLabel.setGeometry(QtCore.QRect(260, 80, 471, 45))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.mainLabel.setFont(font)
        self.mainLabel.setStyleSheet("background:transparent;\n"
"font-size:30px;")
        self.mainLabel.setObjectName("mainLabel")
        self.transcribebox = QtWidgets.QTextBrowser(self.centralwidget)
        self.transcribebox.setGeometry(QtCore.QRect(240, 330, 511, 231))
        self.transcribebox.setStyleSheet("background:transparent;\n"
"font-size:18px;\n"
"border:1px solid white;")
        self.transcribebox.setObjectName("transcribebox")
        self.uploadBtn = QtWidgets.QPushButton(self.centralwidget)
        self.uploadBtn.setGeometry(QtCore.QRect(550, 600, 200, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.uploadBtn.setFont(font)
        self.uploadBtn.setObjectName("uploadBtn")
        self.uploadBtn.clicked.connect(
            lambda: self.uploadButtonFunction())
        self.browseBtn = QtWidgets.QPushButton(self.centralwidget)
        self.browseBtn.setGeometry(QtCore.QRect(540, 200, 200, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.browseBtn.setFont(font)
        self.browseBtn.setObjectName("browseBtn")
        self.browseBtn.clicked.connect(
                lambda: self.browseButtonFunction())
        self.uploadLabel = QtWidgets.QLabel(self.centralwidget)
        self.uploadLabel.setGeometry(QtCore.QRect(240, 200, 241, 45))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.uploadLabel.setFont(font)
        self.uploadLabel.setStyleSheet("background:transparent;")
        self.uploadLabel.setObjectName("uploadLabel")
        self.uploadLabel_2 = QtWidgets.QLabel(self.centralwidget)
        self.uploadLabel_2.setGeometry(QtCore.QRect(240, 270, 241, 45))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.uploadLabel_2.setFont(font)
        self.uploadLabel_2.setStyleSheet("background:transparent;")
        self.uploadLabel_2.setObjectName("uploadLabel_2")
        self.filename = QtWidgets.QLineEdit(self.centralwidget)
        self.filename.setGeometry(QtCore.QRect(390, 220, 150, 20))
        self.filename.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.filename.setStyleSheet("background:transparent;\n"
"border:none;\n"
"color:white;\n"
"font-size:14px;\n"                                   
"text-align:right;")
        self.filename.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.filename.setObjectName("filename")
        self.uploaded = QtWidgets.QLineEdit(self.centralwidget)
        self.uploaded.setGeometry(QtCore.QRect(392, 620, 151, 20))
        self.uploaded.setStyleSheet("background:transparent;\n"
                                    "border:none;\n"
                                    "color:white;\n"
                                    "text-align:right;")
        self.uploaded.setObjectName("uploaded")
        self.backLink = QtWidgets.QPushButton(self.centralwidget)
        self.backLink.setGeometry(QtCore.QRect(462, 650, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.backLink.setFont(font)
        self.backLink.setStyleSheet("background:transparent;\n"
                                      "border:none;\n"
                                      "text-decoration:underline;")
        self.backLink.setObjectName("backLink")
        self.backLink.clicked.connect(
            lambda: self.backButtonFunction(MainWindow))
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Upload File"))
        self.mainLabel.setText(_translate("MainWindow", "Video Question Answer system"))
        self.uploadBtn.setText(_translate("MainWindow", "Upload"))
        self.browseBtn.setText(_translate("MainWindow", "Browse"))
        self.uploadLabel.setText(_translate("MainWindow", "Upload Video"))
        self.uploadLabel_2.setText(_translate("MainWindow", "Verbatim"))
        self.filename.setText(_translate("MainWindow", "No File Choosen"))
        self.backLink.setText(_translate("MainWindow", "Go Back"))
        self.transcribebox.setText(_translate("MainWindow", "Conversion Of Video To Text Will Shown Here "))

    def browseButtonFunction(self):

        self.uploaded.clear()
        self.filename.clear()
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        filepath, _ = QtWidgets.QFileDialog.getOpenFileName(
                None,
                "QFileDialog.getOpenFileName()",
                "",
                "video (*.mp4);;video (*.mp4)",
                options=options)

        fileName = os.path.basename(filepath)
        self.fileName = fileName.split(".")[0]

        QtWidgets.qApp.processEvents()
        if fileName not in self.arr:
            print("new video")
            self.filePath = filepath
            save_path = 'F:/pycharmProjects/HCI-Project/' + self.fileName + '.mp4'
            copyfile(filepath, save_path)
            self.printing(fileName)
            QtWidgets.qApp.processEvents()
            transcribe = FindPointOfTime(self.fileName)
            # transcribe ="test"
            self.transcribebox.clear()
            self.transcribebox.setText(transcribe)
        else:
            print("Old one")
            from dialogueBox import Ui_MainWindow
            global msgWindow
            msgWindow = QtWidgets.QMainWindow()
            lui = Ui_MainWindow("Video Already Exist in System")
            lui.setupUi(msgWindow)
            msgWindow.show()

    def printing(self,fileName):
        self.filename.setText(fileName)
        self.transcribebox.setText("Video Is Converting To Text..........................")


    def uploadButtonFunction(self):
        print("Upload Button Clicked")
        if self.fileName == "" and self.filePath == "":
            self.filename.setText("FIRST CHOOSE FILE")
        else:
            source = self.fileName + ".mp4"
            destination = 'F:/pycharmProjects/HCI-Project/Mp4Files/' + self.fileName + '.mp4'
            move(source, destination)
            source = self.fileName  + ".mp3"
            destination = 'F:/pycharmProjects/HCI-Project/Mp3Files/' + self.fileName + '.mp3'
            move(source, destination)
            source =  self.fileName + ".wav"
            destination = 'F:/pycharmProjects/HCI-Project/WavFiles/' + self.fileName + '.wav'
            move(source, destination)
            source = "T-" + self.fileName + ".txt"
            destination = 'F:/pycharmProjects/HCI-Project/Translation/T-' + self.fileName + '.txt'
            move(source, destination)
            print("Boolean Model Called")
            obj = BooleanModel()
            print("Object created ")
            obj.CreatingIndexes()
            print("done")
            self.transcribebox.clear()
            self.filename.clear()
            self.filename.setText("No File Choosen")
            self.transcribebox.setText("Conversion Of Video To Text Will Shown Here")
            self.fileName = ""
            # self.uploaded.setText("File Has Uploaded Successully!")
            from dialogueBox import Ui_MainWindow
            global msgWindow2
            msgWindow2 = QtWidgets.QMainWindow()
            lui = Ui_MainWindow("Video Has Uploaded Sucessfully")
            lui.setupUi(msgWindow2)
            msgWindow2.show()
            self.fileName = ""
            self.filePath = ""

    def backButtonFunction(self,mainWindow):
        dir_name = "F:/pycharmProjects/HCI-Project/"
        test = os.listdir(dir_name)
        for item in test:
            if item.endswith(".mp3"):
                os.remove(os.path.join(dir_name, item))
            elif item.endswith(".mp4"):
                os.remove(os.path.join(dir_name, item))
            elif item.endswith(".wav"):
                os.remove(os.path.join(dir_name, item))
            elif item.startswith("T-"):
                os.remove(os.path.join(dir_name, item))



        from firstScreen import Ui_mainWindow
        global subWindow
        subWindow = QtWidgets.QMainWindow()
        lui = Ui_mainWindow()
        lui.setupUi(subWindow)
        mainWindow.close()
        subWindow.show()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = UploadUi_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
